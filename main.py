import sqlite3
from telebot import types
import telebot
import random
import logging
import datetime
import sys

date_obj = datetime.datetime.now()
date = date_obj.strftime('%m-%d-%y-%H-%M-%S ')

# logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s %(name)s %(message)s')
logging.basicConfig(
    level=logging.DEBUG,
    filename=('logs/' + date + '.log'),
    format='%(asctime)s %(levelname)s %(name)s %(message)s'
)

token = "6234331500:AAG2Hcuep4y4N58uuJeXrHnjbpaSyrpXk3c"
logging.info('Token successfully initted: ' + token)
bot = telebot.TeleBot(token)
logging.info("Bot successfully initted")
conn = sqlite3.connect('anek.db', check_same_thread=False)
c = conn.cursor()
logging.info("DB connected successfully, cursor created")


def log(message): logging.info(str(message.chat.id) + " " + "@" + str(message.from_user.username
                                                                      if message.from_user.username else "None")
                               + " " + str(message.text))


@bot.message_handler(commands=['start'])
def start(message):
    log(message)
    bot.send_message(message.chat.id, f'''üëã <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø - –§–∞–≤–∞–Ω–µ–∫, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä 
—Å–∞–º—ã—Ö —Å–º–µ—à–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤!</b>

üòÇ <i><b>–£ –º–µ–Ω—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—É—Ç–æ–∫, –∫–∞–∫ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö, —Ç–∞–∫ –∏ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–∑ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ :)</b></i>

<b>üôÉ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
- –ò—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª—é–±–∏–º—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã –∫–∞–∫ –≤ –±–æ—Ç–µ, —Ç–∞–∫ –∏ –≤ –≤–∏–¥–µ —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫
- –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–æ–∏ –∞–Ω–µ–∫–¥–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
- –ü–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å –Ω–æ–≤—ã–º–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏</b>

‚ùó<b>–í–ù–ò–ú–ê–ù–ò–ï! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É, —á—ë—Ä–Ω—ã–π —é–º–æ—Ä, –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–µ —Ç–µ–º—ã. 
–ú—ã –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç –∫–∞–∫-—Ç–æ –∑–∞–¥–µ–ª –≤–∞—Å –∏/–∏–ª–∏ –≥—Ä—É–ø–ø—É –ª—é–¥–µ–π.</b>

üõ† <u><b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∫ @anal_nosorog2009 –∏ @Youtya_Youtyev</b></u>

üò∏ <b><i>–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: https://github.com/YoutyaYoutyev/favanek</i></b>''', parse_mode='HTML')


@bot.message_handler(commands=['help'])
def start(message):
    log(message)
    bot.send_message(message.chat.id, f'''#‚É£ <i>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
[–Ω–æ–º–µ—Ä –∞–Ω–µ–∫–¥–æ—Ç–∞] - –≤—ã—Å–ª–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –ø–æ–¥ —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/rand - —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç
/fav - —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
/sub - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É 
/unsub - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
/suggest - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—à –∞–Ω–µ–∫–¥–æ—Ç :)</i>''', parse_mode='HTML')


@bot.message_handler(commands=['rand'])
def gen_rand_anek(message):
    log(message)
    try:
        rand = random.randrange(1, 10)
        markup = types.InlineKeyboardMarkup()
        add_fav_btn = types.InlineKeyboardButton(text='üåü –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                                                 callback_data='add_fav ' + str(rand))
        markup.add(add_fav_btn)
        anek = c.execute('SELECT text FROM anek WHERE id=' + str(rand)).fetchall()
        bot.send_message(message.chat.id, '–í–æ—Ç —Ç–µ–±–µ –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –º–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
        bot.send_photo(message.chat.id, open('images/' + str(rand) + '.png', 'rb'),
                       caption=("<b>#" + str(rand) + "\n \n</b>" + "<i>" + anek[0][0] + "</i>"), parse_mode='HTML',
                       reply_markup=markup)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ > " + str(e))
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')


@bot.callback_query_handler(func=lambda call: True)
def add_fav(call):
    if 'add_fav' in call.data:
        anek_id = call.data.split()[-1]
        user_id = call.message.from_user.id
        print(anek_id)
        add_fav_to_db(anek_id, user_id, call.message)


@bot.message_handler(commands=['suggest'])
def suggest_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    markup.add(btn1)
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–Ω–µ–∫–¥–æ—Ç. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ –ø–æ–º–æ—â—å',
                     reply_markup=markup)
    bot.register_next_step_handler(message, save_suggestion)


def save_suggestion(message):
    user_id = str(message.from_user.id)
    username = str(message.from_user.username)
    suggestion = str(message.text)
    if message.text != "–û—Ç–º–µ–Ω–∞":
        try:
            c.execute("INSERT INTO suggestions VALUES (NULL, ?,?,?)", (user_id, username, suggestion))
            conn.commit()
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∞–Ω–µ–∫–¥–æ—Ç, –º—ã –æ—Ü–µ–Ω–∏–º –µ–≥–æ!')
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ > " + str(e))
            bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –æ—à–∏–±–∫–∞!')
    else:
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–∞–∫ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ;)')


@bot.message_handler(commands=['sub'])
def subscribe(message):
    try:
        user_id = str(message.from_user.id)
        with open('subs.txt', 'r') as sublist:
            sublist = sublist.read()
            sublist = sublist.split('\n')
        if user_id in sublist:
            bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ :)')
        else:
            with open('subs.txt', 'r+') as sublist:
                sublist.write(user_id + "\n")
            bot.send_message(message.chat.id, '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ :)')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        logging.error("–û—à–∏–±–∫–∞ > " + str(e))


@bot.message_handler(commands=['unsub'])
def unsubscribe(message):
    try:
        user_id = str(message.from_user.id)
        with open('subs.txt', 'r') as sublist:
            sublist = sublist.read()
            sublist = sublist.split('\n')
        if user_id not in sublist:
            bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ :)')
        else:
            with open('subs.txt', 'r') as sublist:
                sublisttext = sublist.read()
                sublistlist = sublisttext.split('\n')
                sublistlist.remove(user_id)
                tempstr = ""
            with open('subs.txt', 'w') as sublist:
                for i in sublistlist:
                    tempstr = tempstr + i + "\n"
                sublist.write(tempstr)
            bot.send_message(message.chat.id, '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ :(')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        logging.error("–û—à–∏–±–∫–∞ > " + str(e))


@bot.message_handler(commands=['send'])
def sendm(message):
    try:
        user_id = str(message.from_user.id)
        with open("admins.txt", "r") as adminl:
            adminl = adminl.read()
            adminl = adminl.split("\n")
        if user_id in adminl:
            with open('subs.txt', 'r') as sublist:
                sublist = sublist.read()
                sublist = sublist.split('\n')
            try:
                for i in sublist:
                    bot.send_message(i, message.text[5:])
            except Exception:
                pass
        else:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã :)')
    except Exception as e:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
        logging.error("–û—à–∏–±–∫–∞ > " + str(e))


@bot.message_handler(commands=['botstop'])
def botstop(message):
    try:
        user_id = str(message.from_user.id)
        with open("admins.txt", "r") as adminl:
            adminl = adminl.read()
            adminl = adminl.split("\n")
        if user_id in adminl:
            sys.exit()
        else:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã :)')
    except Exception as e:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
        logging.error("–û—à–∏–±–∫–∞ > " + str(e))


@bot.message_handler(content_types=['text'])
def anek_by_id(message):
    log(message)
    try:
        markup = types.InlineKeyboardMarkup()
        add_fav_btn = types.InlineKeyboardButton(text='üåü –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                                                 callback_data='add_fav ' + str(message.text))
        markup.add(add_fav_btn)
        anek = c.execute('SELECT text FROM anek WHERE id=' + str(message.text)).fetchall()
        bot.send_photo(message.chat.id, open('images/' + message.text + '.png', 'rb'),
                       caption=("<b>#" + message.text + "\n \n</b>" + "<i>" + anek[0][0] + "</i>"), parse_mode='HTML',
                       reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ ID –∞–Ω–µ–∫–¥–æ—Ç–∞.')
        logging.error("–û—à–∏–±–∫–∞ > " + str(e))


@bot.callback_query_handler(func=lambda call: True)
def add_fav(call):
    if 'add_fav' in call.data:
        anek_id = call.data.split()[-1]
        user_id = call.message.from_user.id
        print(anek_id)
        add_fav_to_db(anek_id, user_id, call.message)


def add_fav_to_db(anek_id, user_id, message):
    global c, conn

    keyboard = types.InlineKeyboardMarkup()
    anek_id, user_id = str(anek_id), str(user_id)

    try:
        c.execute("SELECT id FROM user_fav WHERE id = ?", (user_id, ))
        if c.fetchone() is None:
            bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
            c.execute("INSERT INTO user_fav VALUES (?, ?)", (user_id, anek_id))
            conn.commit()
        else:
            favs = c.execute('SELECT favs FROM user_fav WHERE id = ?', (user_id, )).fetchall()[0][0]
            favs = str(favs)
            if anek_id not in favs:
                favs += ' ' + anek_id
                c.execute('UPDATE user_fav SET favs = ? WHERE id = ?', (favs, user_id))
                conn.commit()
                bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=keyboard)
            else:
                bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –∞–Ω–µ–∫–¥–æ—Ç —É–∂–µ –µ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º')
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ > " + str(e))
        bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –æ—à–∏–±–∫–∞!')


bot.infinity_polling()

if __name__ == '__main__':
    logging.info("Bot STOPPED")
